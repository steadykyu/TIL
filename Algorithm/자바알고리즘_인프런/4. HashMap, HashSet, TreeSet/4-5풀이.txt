import java.util.*;
/**
 * -----------------------------아이디어
 * 1. 삼중 for문을 이용하여 모든 세 숫자의 합을 구한다.
 * 2. 배열의 합을 중복제거를 위해 TreeSet 넣어준다.
 * 3. key만 따로 꺼내서 배열로 만든후 정렬한다.
 * 4. k번쨰 큰 숫자를 꺼내서 출력한다.
 * -----------------------------구현
 * 1. new TreeSet<>(Collections.reverseOrder()) : 내림차순의 순서가 있도록 Set을 생성한다.
 * 2. 삼중 for문에서 i < n , j < n 으로 해도 된다. 만약 i = n-1 이면 j와 k의 조건식이 false가 되어 실행되지 않는다.
 * + TreeSet.remove(int x); : Set 안의 x를 지우고 boolean을 return한다.
 * + TreeSet.size() : 원소의 개수를 int 형태로 return 한다.
 * + TreeSet.first() : 첫번쨰 원소를 가져와준다.(내림차순이면 가장 큰값)
 * + TreeSet.last() : 마지막번쨰 원소를 가져와준다.(내림차순이면 가장 큰값)
 */
//10 3
//13 15 34 23 45 65 33 11 26 42
class Main {
    public int solution(int n, int k,int[] arr) {
        int answer = -1;
        TreeSet<Integer> Tset = new TreeSet<>(Collections.reverseOrder());

        // i < arr.length 해도 된다.
       for(int i =0; i< arr.length-2; i++) {
           for (int j = i+1; j < arr.length - 1; j++) {
               for (int p = j+1; p < arr.length; p++) {
                   Tset.add(arr[i] + arr[j] + arr[p]);
               }
           }
       }
       int cnt = 0;

//       Tset.remove(143); // 3번쨰 값 143
//        System.out.println("사이즈 : "+Tset.size());
//        System.out.println("첫번쨰값 : "+ Tset.first());
//        System.out.println("마지막값 : "+ Tset.last());

        for(int x : Tset){

           cnt++;
           if(cnt==k) return x;
           //System.out.println(cnt + "-" + x);
       }
       return answer;
    }

    public static void main(String[] args){
        Main T = new Main();
        Scanner in=new Scanner(System.in);
        int n = in.nextInt();
        int k = in.nextInt();

        int[] arr = new int[n];
        for(int i=0; i<n;i++){
            arr[i] = in.nextInt();
        }
        System.out.println(T.solution(n,k,arr));
    }
}