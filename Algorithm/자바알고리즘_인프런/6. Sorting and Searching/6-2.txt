import java.util.*;
/**
 * 버블 정렬
 * 오름차순
 * -----------------------------아이디어
 * 1. 정렬에서 앞과 뒤의 값을 비교한다.
 * 1-1 앞보다 뒤가 더 작을때, 두 값을 교환해준다.
 *
 * 2. 한번 전체 과정(0 ~ n-1) 을 겪으면 가장 큰 숫자가 마지막 index(ㅜ-1)로 간다.
 * 3. 그러므로 다음 과정에서는 (0 ~ n-2) 의 범위만 비교하면 그다음 큰 숫자가 n-2의 index로 간다.
 * -----------------------------구현.
 * 1. i는 턴의 횟수, j는 각 턴마다 비교하는 범위가 된다.
 * 2. arr[j] > arr[j+1]) : arr의 인접한 두 배열을 비교해준다.
 */

//6
//13 5 11 7 23 15

class Main {
    public int[] solution(int n, int[] arr) {
        int[] answer = new int[n];
        int max = Integer.MIN_VALUE;
        for(int i =0; i < n ; i++){
            for(int j = 0; j < n-1-i ; j++){
                if(arr[j] > arr[j+1]){
                    int tmp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = tmp;
                }
            }
//            for(int x :arr){
//                System.out.print(x + " ");
//            }
//            System.out.println();
        }
        return arr;
    }

    public static void main(String[] args){
        Main T = new Main();
        Scanner in=new Scanner(System.in);
        int n = in.nextInt();
        int[] arr = new int[n];

        for(int i=0 ; i<n; i++){
            arr[i] = in.nextInt();
        }
        for(int x : T.solution(n,arr)){
            System.out.print(x + " ");
        }
    }
}