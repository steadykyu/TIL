import java.util.*;
/**
 * 앞에서 부터 맨끝까지 숫자를 검색해보는 방법을 순차검색이라고 한다.
 * 이는 시간복잡도가 O(N)을 가진다.
 * -----------------------------아이디어
 *
 * 이분검색(binary Search) 알고리즘
 *
 * 1. 배열을 정렬시켜준다.
 *
 * 2. lt = 0 , rt = n-1(7) , mid = (lt + rt)/2 (3)
 *
 * 3. lt <= rt 인경우 아래 조건들을 돌려주자.
 * 3-1 포인터의 중간값이 mid 일때, 원하는 답 발견!! (mid +1)
 * 3-2 포인터의 중간값이 찾는 값보다 클때, rt를 중간값보다 하나 더 작은 값까지 왼쪽으로 이동
 * 3-3 포인터의 중간값이 찾는 값보다 작을때 lt를 중간값보다 하나 더 큰 값까지 오른쪽으로 이동
 *
 * 4. 만약 lt > rt 라면 배열에 주어진 값이 없다는 의미일 것이다. 이때는 강제로 검색을 멈춰주자.
 *
 * -----------------------------구현
 * if(arr[mid] == m (32) ) return mid+1;
 *  else if ( arr[mid] > m ) rt=mid -1 (rt를 옮겨준다.) 검색범위를 좁혀준다.
 *  else lt = mid +1 (lt를 옮겨준다.)
 */

//8 32
//23 87 65 12 57 32 99 81
class Main {
    public int solution(int n, int num, int[] arr) {
        int answer = 0;
        Arrays.sort(arr);
        int lt = 0 , rt = n-1;
        //
        while(lt <= rt){
           int mid = (lt + rt)/2;
           if(arr[mid] == num) {
               answer = mid +1;         // 몇번째 값을 찾으므로 index + 1
           }
           if(arr[mid] > num) rt = mid-1;
           else lt = mid +1;
        }
        return answer;
    }
    
    public static void main(String[] args){
        Main T = new Main();
        Scanner in=new Scanner(System.in);
        int n = in.nextInt();
        int num = in.nextInt();

        int[] arr = new int[n];

        for(int i=0 ; i<n; i++){
           arr[i] = in.nextInt();
        }
        System.out.println(T.solution(n,num,arr));
    }
}