import java.util.*;
/**
 * -----------------------------아이디어
 * 1. 이차원 배열에서 0이 아닌 값을 만날때만, stack에 값을 넣어준다.
 * 2. 만약 stack이 비어있지 않고, 그 값이 stack의 가장 최상단의 값과 같다면, 최상단의 값을 제거해준다.
 * 결론적으로 두 값을 제거한 것이므로 answer += 2 해준다.
  ( Stack.peek() 메서드를 사용하기 위해 Stack이 공백이지 않을떄만 가져온다.)
 * -----------------------------구현
 * + Stack.peek() : Stack의 가장 상단의 값을 return한다. 그러나 pop과 다르게 해당 값을 제거하지 않는다.
 */
//5
//0 0 0 0 0
//0 0 1 0 3
//0 2 5 0 1
//4 2 4 4 2
//3 5 1 3 1
//8
//1 5 3 5 1 2 1 4
class Main {
    public int solution(int n,int[][] board, int t, int[] moves) {
        Stack<Integer> stack = new Stack<>();
       int answer=0;
//        System.out.println(arr[3][0]);

        for(int pos : moves){
            for(int row=0; row < n; row++){
                // 인형이 발견된 경우
                if(board[row][pos-1] != 0 ) {
                    int tmp = board[row][pos-1];
                    board[row][pos-1] = 0;
                    // 이전과 같은 값이 온 경우 - pop()
                    if(!stack.isEmpty() && stack.peek() == tmp){
                        stack.pop();
                        answer +=2;
                    }else{
                        stack.push(tmp);
                    }
                    break;
                }
            }
        }
       return answer;
    }

    public static void main(String[] args){
        Main T = new Main();
        Scanner in=new Scanner(System.in);
        int n = in.nextInt();
        int[][] arr = new int[n][n];

        for(int i = 0; i < arr.length; i++){
            for(int j=0; j < arr[1].length; j++){
                arr[i][j] = in.nextInt();
            }
        }

        int t = in.nextInt();
        int[] play = new int[t];
        for(int i=0; i < play.length; i++){
            play[i] = in.nextInt();
        }

//        // 이차원 배열 출력해보기
//        for(int i = 0; i < arr.length; i++){
//            for(int j=0; j < arr[1].length; j++){
//                System.out.print(arr[i][j]+ " ");
//            }
//            System.out.println();
//        }

        System.out.println(T.solution(n,arr,t,play));
    }
}