import java.util.*;
/**
 * -----------------------------아이디어
 *  1. k일일 경우 , k-1일까지만 먼저 해시를 만들어 둔다.
 *
 *  2. 이떄 첫번째가 lt, k-1번째가 rt가 되도록 투포인터 알고리즘과 sliding window를 동작시켜준다.
 *  2-1.해시에 대하여 rt를 증가시키고, 해당 rt의 key속 value를 증가시킨다. 단 value가 0인 경우 해당키를 생성하고 1을 증가시켜준다.
 *  2-2 lt를 증가시키고 해당 lt의 key속 value를 감소시킨다. 단 만약 감소시킨 value의 값이 0인 경우, HashMap에서의 해당 key를 제거해준다.
 *
 * -----------------------------구현
 *  1. 결과를 출력할때 printf 대신 print를 써야한다.
 *  printf를 쓰면 time exceed limit이 뜬다.
 */
class Main {
    public ArrayList<Integer> solution(int n, int k, int[] arr) {
       ArrayList<Integer> answer = new ArrayList<>();
       HashMap<Integer,Integer> HM = new HashMap<>();
       // k-1 까지의 HM
       for(int i =0; i< k-1 ; i++){
           HM.put(arr[i],HM.getOrDefault(arr[i],0)+1);
       }
       int lt=0;
       for(int rt=k-1; rt<n; rt++){
           HM.put(arr[rt],HM.getOrDefault(arr[rt],0)+1);
           answer.add(HM.size());
           HM.put(arr[lt],HM.get(arr[lt])-1); // arr[lt]을 key로 가지는 value값에 -1 해주기.
           if(HM.get(arr[lt])==0) HM.remove(arr[lt]);
           lt++;
       }
       return answer;
    }

    public static void main(String[] args){
        Main T = new Main();
        Scanner in=new Scanner(System.in);
        int n = in.nextInt();
        int k = in.nextInt();
        int[] arr = new int[n];
        for(int x=0; x < n; x++){
            arr[x] = in.nextInt();
        }
        for(int x : T.solution(n,k,arr)){
            System.out.print(x+" ");
        };
    }
}