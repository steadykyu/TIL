import java.util.*;
/**
 * LRU
 * -----------------------------아이디어
 * 이전의 값을 밀어주는 삽입정렬을 이용하자.
 * 1. Cache Miss : n 길이의 배열에 대하여 , i범위 : 1 ~ n-1
 * Cache[i] = Cache[i-1] 을 시켜준다.( 한칸씩 뒤로 밀려난다.)
 * Cache[0] = 삽입되는 글자가 온다.
 *
 * 2. Cache Hit : n 길이의 배열에 대하여, i범위 : 1 ~ idx (해당 값이 존재하는 index(=idx) 이전까지)
 * Cache[i] = Cache[i-1] 을 시켜준다.
 * Cache[0] = 삽입되는 글자가 온다.
 * 
 * -----------------------------구현
 * 1. 거꾸로 된 for문 : 그저 (idx-1 ~ 0)번째 횟수를 시행할 뿐이다.
 * 1-1 조건문에서 선언문까지의 범위 라고 생각해도 된다.
 *
 * for(int k=pos; k>=1; k--){
 *     Cache[k]= Cache[k-1];}
 *
 * 2. 내 풀이와 다르게 Cache(k) , Cache(k-1)을 해주어 더욱 가독성 있게 만들어 주었다.
 */

//5 9
//1 2 3 2 6 2 3 5 7

class Main {
    public int[] solution(int size, int n, int[] arr) {
        int[] cache = new int[size];
        // 작업번호
        for(int x : arr){
            int pos = -1;
            // answer에 tmp값이 있는지 없는지 확인
            for(int i=0; i < size; i++) if (cache[i] == x) pos = i;

            // pos = -1 일떄 : Cache Miss(값이 없을때)
            // 맨앞에 최신값을 넣고, 뒤로 한칸씩 미룬다.
            if(pos == -1) {
                for(int i=size-1 ; i>=1 ; i--){
                    cache[i] = cache[i-1];
                }
            }else{
                // Cache Hit(값이 있을때)
                // 맨앞에 최신값을 넣고, 발견값 인덱스(pos)의 이전값들을 전부 한칸씩 미룬다.
                for(int k=pos; k>=1; k--){
                    cache[k]= cache[k-1];
                }
            }
            cache[0] = x; // 중복작업

//            for(int x : answer){
//                System.out.print(x + " ");
//            }
//            System.out.println();
        }
        return cache;
    }

    public static void main(String[] args){
        Main T = new Main();
        Scanner in=new Scanner(System.in);
        int cache = in.nextInt();
        int n = in.nextInt();
        int[] arr = new int[n];

        for(int i=0 ; i<n; i++){
            arr[i] = in.nextInt();
        }
        for(int x : T.solution(cache,n,arr)){
            System.out.print(x + " ");
        }
    }
}