/**
 * 1. arr[n+1][6] : 문제와 똑같이 index 값을 넣기위해 다음과 같이 행렬을 만든다.
 * 2. arr 생성시,  행렬 각각을 1~n, 1~5의 index 안에 값을 넣어준다.
 * 3. 삼중 for문을 사용하여 각 배열의 원소일때, 다른 행들과 몇개가 같은지 구하여 cnt에 넣어준다.
 * (여기서 i, j는 해당 행의 번호를 가진 학생을 / k는 학년을 의미한다.)
 * 4. 위 알고리즘시 발생하는 중복된 cnt 증가를 막기위해 break;를 넣어준다. (중요!!!!!)
 *
 * -----------------------------------------------------------------------------
 * for문 부분이 잘안보이는데, i=1번일때(1번의 1,2,3,4,5학년), j는 1~5번까지 1~5학년까지의 반과 각각 비교하는 식의 루프이다.
 * 원소하나로 생각하지 말고, k열을 가진 i,j를 행으로 생각해보자.
 */

import java.util.*;
class Main {
    public int solution(int n, int[][] arr) {
        int answer = 0, max = Integer.MIN_VALUE;

        for (int i = 1; i < n + 1; i++) {
            int cnt = 0;

            for (int j = 1; j < n + 1; j++) {
                for (int k = 1; k < 6; k++) {
                    if (arr[i][k] == arr[j][k]) {
                        cnt++;
                        break;
                    }
                }
            }
            if(cnt > max){
                max=cnt;
                answer=i;
            }
        }
        return answer;
    }

    public static void main(String[] args){
        Main T = new Main();
        Scanner kb = new Scanner(System.in);
        int n= kb.nextInt();
        int[][] arr=new int[n+1][6];

        for(int i=1; i<=n; i++){
            for(int j=1; j<=5; j++)
            arr[i][j]=kb.nextInt();
        }

        System.out.println(T.solution(n,arr));
    }
}