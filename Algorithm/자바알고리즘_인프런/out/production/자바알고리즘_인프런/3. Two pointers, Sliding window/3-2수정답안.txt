/**
 *------------------------two pointer 알고리즘------------------------------
 * 1. 각 배열을 오름차순 해둔다.
 * 2. A 배열의 원소가 B배열의 원소보다 작을 경우에 A배열의 포인터를 1 증가시킨다.
 * 3. A 배열과 B배열의 원소가 같을 경우, 해당원소를 최종배열에 추가한후 두 배열의 포인터를 1씩 증가시킨다.
 * 4. 둘 중 한배열의 포인터가 배열의 크기보다 커지면 더이상 공통배열이 없다는 의미이므로 종료한다.
 */

import java.util.*;
class Main {
    public ArrayList<Integer> solution(int n, int m, int[] a, int[] b){
        ArrayList<Integer> answer = new ArrayList<>();

        // 각각 배열 정렬해주기.
        Arrays.sort(a);
        Arrays.sort(b);
        int p1 =0,p2=0;

        while(p1 < n && p2 < m){
            // 같을떄는 동시 증가
            if(a[p1]==b[p2]){
                answer.add(a[p1++]);
                p2++;
            }
            // 오름차순으로 최종배열을 넣어야하므로 작을때부터 포인터 값을 추가시켜준다.
            else if(a[p1] < b[p2]) p1++;
            else p2++;
        }
        return answer;
    }

    public static void main(String[] args){
        Main T = new Main();
        Scanner kb = new Scanner(System.in);
        int n=kb.nextInt();
        int[] a=new int[n];
        for(int i=0; i<n; i++){
            a[i]=kb.nextInt();
        }
        int m=kb.nextInt();
        int[] b=new int[m];
        for(int i=0; i<m; i++){
            b[i]=kb.nextInt();
        }
        for(int x : T.solution(n, m, a, b)) System.out.print(x+" ");
    }
}