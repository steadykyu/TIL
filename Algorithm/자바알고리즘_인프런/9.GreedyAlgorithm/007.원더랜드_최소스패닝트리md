# 최소스패닝트리 : 크루스칼

> 그래프와 트리의 차이

https://bigsong.tistory.com/33#:~:text=%ED%8A%B8%EB%A6%AC%EB%8A%94%20%EA%B7%B8%EB%9E%98%ED%94%84%EC%99%80%20%EA%B0%99%EC%9D%B4%20%EB%85%B8%EB%93%9C,%ED%95%B4%EB%8B%B9%ED%95%98%EB%8A%94%20%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%9D%B4%EB%8B%A4.&text=%EC%82%AC%EC%9D%B4%ED%81%B4%EC%9D%B4%20%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80%20%EC%95%8A%EB%8A%94,%ED%8A%B8%EB%A6%AC'%EB%9D%BC%EA%B3%A0%20%EB%B6%80%EB%A5%B4%EA%B8%B0%EB%8F%84%20%ED%95%9C%EB%8B%A4.

그래프 : 한 정점을 지나는 경로에서 다른 정점을 통해 돌아올수 있는 회로(돌아오는길)가 존재한다.

트리 :  한 정점을 지나는 경로에서 다른 정점을 통해 돌아올수 있는 회로(돌아오는길)가 존재하지 않는다.
+ 그러므로 정점(노드)의 개수 n개에서 n-1개의 간선을 가진다.

# 설명

그리디 알고리즘으로 동작할 수 있도록 비용을 기준으로 입력값을 정렬해준다.

더 늦게 입력되어 만들어진 간선은 비용이 큰 것을 의미한다. 

그러므로 이미 만들어진 트리 구조에서 회로를 만드는 간선이 입력된다면, 그 간선은 제외시켜야한다. 

<img src ="https://github.com/steadykyu/TIL/blob/master/Algorithm/%EC%9E%90%EB%B0%94%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%9D%B8%ED%94%84%EB%9F%B0/9.GreedyAlgorithm/img/7_1.png" width="50%" height="50%">

# 구현 
```java
import java.util.*;

class Edge implements Comparable<Edge>{
    public int v1;
    public int v2;
    public int cost;
    Edge(int v1, int v2, int cost){
        this.v1 = v1;
        this.v2 = v2;
        this.cost = cost;
    }
    @Override
    public int compareTo(Edge o) {
        return this.cost - o.cost;
    }
}
class Main {
    static int[] unf;
    public static void main(String[] args) {
        Main T = new Main();
        Scanner kb = new Scanner(System.in);
        int n =kb.nextInt();
        int m = kb.nextInt();
        unf = new int[n+1];
        ArrayList<Edge> arr = new ArrayList<>();
        for(int i=1; i<=n; i++) unf[i] = i;
        for(int i=0; i<m; i++){
            int a = kb.nextInt();
            int b = kb.nextInt();
            int c = kb.nextInt();
            arr.add(new Edge(a,b,c));   // 각 간선 주입
        }
        int answer = 0; int cnt=0;
        Collections.sort(arr);          // for greedy 
        for(Edge ob : arr){
            int fv1 = Find(ob.v1);
            int fv2 = Find(ob.v2);
            if(fv1 != fv2){
                answer += ob.cost;
                cnt++;
                if(cnt == n-1) break;
                Union(ob.v1,ob.v2);
            }
        }
        System.out.println(answer);
    }

    public static void Union(int a, int b) {
        int fa = Find(a);
        int fb = Find(b);
        if(fa != fb) unf[fa]=fb;
    }

    public static int Find(int v) {
        if(v==unf[v]) return v;
        else return unf[v] = Find(unf[v]);
    }
}
```
> Edge class

간선 객체를 의미한다.
+ v1, v2 : 노드값
+ cost : 비용(가중치)

그리디 알고리즘으로 해결하기 위해, 비용이 적은 순으로 정렬하도록 정렬기준을 만들어주자.

> Find, Union

경로로 연결된 노드들은 하나의 집합이라고 표현할 수 있다. 

이 문제는 모두 연결하는 최소비용을 묻고 있으므로, 하나의 집합이 생성되도록 예시를 줄 것이다.

알맞게 Find(), Union을 구현하자.
+ Find() : 노드가 속하는 집합을 알려준다.
+ Union(a, b) : 해당 노드들은 연결시킨다.(=집합에 속하도록 한다.)

> 예시의 간선의 포함 유무를 결정하기

```java
 for(Edge ob : arr){
            int fv1 = Find(ob.v1);
            int fv2 = Find(ob.v2);
            if(fv1 != fv2){
                answer += ob.cost;
                cnt++;
                if(cnt == n-1) break;
                Union(ob.v1,ob.v2);
            }
        }
```

fv1, fv2 노드의 집합이 다른 경우에만, 연결시킨다. 최종적으로는 하나의 집합을 만들도록 한다.

<img src ="https://github.com/steadykyu/TIL/blob/master/Algorithm/%EC%9E%90%EB%B0%94%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_%EC%9D%B8%ED%94%84%EB%9F%B0/9.GreedyAlgorithm/img/7_2.jpg" width="50%" height="50%">

unf array의 idx와 value가 다를 때, Find() 재귀가 일어난다는 점을 염두하고 바라보자.

근데 문제의 그림과 연결된 선이 다르지 않은가?

어차피 이 문제는 어차피 경로순서가 중요하기 보다는 하나의 집합으로 되어있는지 중요하므로 상관 없다.