## 1. 그리디 알고리즘 정의

말 그대로 선택의 순간마다 당장 눈앞에 보이는 최적의 상황만을 쫓아 최종적인 해답에 도달하는 방법이다.

순간마다 하는 선택은 그 순간에 대해 지역적으로는 최적이지만, 그 선택들을 계속 수집하여 최종적(전역적)인 해답을 만들었다고 해서, 그것이 최적이라는 보장은 없다.

하지만 탐욕 알고리즘을 적용할 수 있는 문제들은 지역적으로 최적이면서 전역적으로도 최적인 문제들이다.

## 2. 탐욕 알고리즘 해결법

1. 선택 절차(Selection Procedure): 현재 상태에서의 최적의 해답을 선택한다.

2. 적절성 검사(Feasibility Check): 선택된 해가 문제의 조건을 만족하는지 검사한다.

3. 해답 검사(Solution Check): 원래의 문제가 해결되었는지 검사하고, 해결되지 않았다면 선택 절차로 돌아가 위의 과정을 반복한다.

## 3. 탐욕 알고리즘의 조건

두가지 조건을 만족해야 탐욕 알고리즘이 잘 작동한다.

1. 탐욕적 선택 속성(Greedy Choice Property) : 앞의 선택이 이후의 선택에 영향을 주지 않는다.

2. 최적 부분 구조(Optimal Substructure) : 문제에 대한 최종 해결 방법은 부분 문제에 대한 최적 문제 해결 방법으로 구성된다.

## 4. 탐욕 알고리즘 사례 or 문제

### 1. 동전 및 지폐를 최소한의 개수로 거슬러 주는 문제

지불금액 56000원을 2000, 5000, 10000, 30000 원권으로 나눈다고 가정하자.

최적의 선택으로 가장 큰 지폐로 먼저 내고, 각 상황마다 지폐개수를 최소화하기위해 가장 큰 지폐로 내면 된다.(나누기 및 나머지 이용)

### 2. LCS - 최장 공통 문자열(or 수열)의 길이 찾기

Longest Common String(or Subsequence)

동적 계획법(DP) 알고리줌중 하나 이지만 , 동시에 부분적으로 분할하여 작은 문제를 해결하고, 각 부분에 대한 최적의 해답을 차례로 구하는 그리디 알고리즘이기도 하다.

ssafy 교재 p158 05 문제 참고

### 3. LIS - 최장 증가 부분 수열 알고리즘

> 정의

원소가 n개인 배열의 일부 원소를 골라내서 만든 부분 수열 중, 각 원소가 이전 원소보다 크다는 조건을 만족하고, 그 길이가 최대인 부분 수열을 최장 증가 부분 수열이라고 합니다.

> 예시

{ 6, 2, 5, 1, 7, 4, 8, 3} 이라는 배열이 있을 경우, LIS는 { 2, 5, 7, 8 } 이 됩니다.

{ 1 1 2 1 3 2 4 3}

위는 오름 차순의 부분을 나타낸것으로, 각 원소때마다 최대의 오름차순 개수를 나타낸다.

https://www.acmicpc.net/problem/2565

```
A : 1 2 3 4 5 6 7 8 9 10
B : 8 2 9 1   4 6   7 10
    1 1 2 1   2 3   4  5

---------------------------------
10(전체) - 5(LIS) - 2(빈것) = 3
```
